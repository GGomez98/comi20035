// -------------------- REPASO -----------------------
// funciones declaradas con o sin parámetros
/*
function mensaje1 (){
    alert("Función declarada")
}

mensaje1();

//Funciones anónimas

const mensaje2 = function () {alert("Esto es una función anónima")}

mensaje2()

//Función flecha

const suma  = (a, b) => { return a + b };
alert(suma(2,4))

*/



//--------------------- CLASE 7 -------------------------
//ejemplo1
/*
function mayorQue(num) {//Primer función
    return (m) => m > num //2da función
    //return (12) => 12 > 7

}

let mayorQueSiete = mayorQue(7) //Se le asigna la función mayorQue


console.log( mayorQueSiete(12) )  //  true

¨*/



//Ejemplo2 
/*
function asignarOperacion(op) {    //1°F
    if (op == "sumar") {
        return (a, b) => a + b     //2°F
    } else if (op == "restar") {
        return (a, b) => a - b     //3°F
    }
}

let suma = asignarOperacion("sumar") 
let resta = asignarOperacion("restar")

console.log( suma(4, 6) )  //  10
console.log( resta(5, 3) )  //  2
*/

//



/*



function porCadaUno(arr, fn) {
    for (const el of arr) {
        fn(el)
    }
}
const numeros= [1, 2, 3, 4]

porCadaUno(numeros, console.log)
// 1
// 2
// 3
// 4

let total = 0

function acumular(num) {
    total += num
}

porCadaUno(numeros, acumular)
console.log(total) // 10

const duplicado = []

porCadaUno(numeros, (el)=> {
    duplicado.push(el * 2)
})

console.log(duplicado) // [2, 4, 6, 8]



*/


//MÉTODOS DE BÚSQUEDA Y TRANSFORMACIÓN

// .forEach()
/*
const numeros = [1, 2, 3, 4, 5, 6]

numeros.forEach( (num)=> {
    console.log(num)
} )


//Es lo mismo que: 
for (let i = 0; i < numeros.length; i++) {
    aconsole.log(numeros[i]);
    }

*/



// .find/
/*
const cursos = [
    {nombre: 'Javascript', precio: 15000},
    {nombre: 'ReactJS', precio: 22000},
    {nombre: 'ReactJS', precio: 20},
]

const resultado = cursos.find((el) => el.nombre === "ReactJS")
const resultado2 = cursos.find((el) => el.nombre === "DW")

console.log(resultado) // {nombre: 'ReactJS', precio: 22000}
console.log(resultado2) // undefined
*/



// .filter()
/*
const cursos = [
    {nombre: 'Javascript', precio: 15000},
    {nombre: 'ReactJS', precio: 22000},
    {nombre: 'AngularJS', precio: 22000},
    {nombre: 'Desarrollo Web', precio: 16000},
]

const resultado = cursos.filter((el) => el.nombre.includes('JS'))
const resultado2 = cursos.filter((el) => el.precio < 30000)

console.log(resultado)
// [
 //   {nombre: 'ReactJS', precio: 22000},
 //   {nombre: 'Angular', precio: 22000}
//]

console.log(resultado2) // []



// .some() (array 157)

console.log( cursos.some((el) => el.nombre == "Desarrollo Web")) 
// true
console.log( cursos.some((el) => el.nombre == "VueJS")) 
// false


*/




// .map() EJEMPLO 1
/*
const cursos = [
    {nombre: 'Javascript', precio: 15000},
    {nombre: 'ReactJS', precio: 22000},
    {nombre: 'AngularJS', precio: 22000},
    {nombre: 'Desarrollo Web', precio: 16000},
]

const nombres = cursos.map((el) => el.nombre)
console.log(nombres)
// [ 'Javascript', 'ReactJS', 'AngularJS', 'Desarrollo Web' ]






//.map() EJEMPLO 2 (array ejemplo1)
const actualizado = cursos.map((el) => {
    return {
        nombre: el.nombre,
        precio: el.precio * 1.25
    }
})

console.log(actualizado)
/* [
     { nombre: 'Javascript', precio: 18750 },
     { nombre: 'ReactJS', precio: 27500 },
     { nombre: 'AngularJS', precio: 27500 },
     { nombre: 'Desarrollo Web', precio: 20000 }
] 
*/




// .reduce() EJEMPLO 1
/*
const numeros = [1, 2, 3, 4, 5, 6]
const total = numeros.reduce((acumulador, elemento) => acumulador + elemento, 0)

console.log(total) // 21
*/




// . reduce() EJEMPLO 2
/*
const miCompra = [
    { nombre: 'Desarrollo Web', precio: 20000 },
    { nombre: 'Javascript', precio: 18750 },
    { nombre: 'ReactJS', precio: 27500 }
]

const total = miCompra.reduce((acc, el) => acc + el.precio, 0)
console.log(total) // 66250



// .sort() No muestra / ordena

const numeros = [ 40, 1, 5, 200 ];
numeros.sort((a, b) => a - b);  // [ 1, 5, 40, 200 ]
numeros.sort((a, b) => b - a);  // [ 200, 40, 5, 1 ]






// .sort EJEMPLO 2 No muestra / ordena

const items = [
    { name: 'Pikachu', price: 21 },
    { name: 'Charmander', price: 37 },
    { name: 'Pidgey', price: 45 },
    { name: 'Squirtle', price: 60 }
  ]
items.sort((a, b) => {
    if (a.name > b.name) {
        return 1;
    }
    if (a.name < b.name) {
        return -1;
    }
    // a es igual a b
    return 0;
})
*/

// ------------------- EJEMPLO -------------------

const productos = [{ id: 1,  producto: "Arroz", precio: 125 },
                  {  id: 2,  producto: "Fideo", precio: 70 },
                  {  id: 3,  producto: "Pan"  , precio: 50},
                  {  id: 4,  producto: "Flan" , precio: 100}]

const buscado = productos.find(producto => producto.id === 3)
console.log(buscado) //{id: 3, producto: "Pan", precio: 50}

const existe = productos.some(producto => producto.nombre === "Harina")
console.log(existe ) // false

const baratos = productos.filter(producto => producto.precio < 100)
console.log(baratos)
// [{id: 2,producto:"Fideo",precio:70},{id:3,producto:"Pan",precio: 50}]

const listaNombres = productos.map(producto => producto.nombre)
console.log(listaNombres);
//[“Arroz”, “Fideo”, “Pan”, “Flan”]


